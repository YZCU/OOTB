addpath('./util');
attPath = '.\anno\att\';
attName = {'car' 'ship' 'train' 'plane' 'DEF' 'IPR' 'PO' 'FO' 'IV' 'MB' 'BC' 'OON' 'SA' 'LT' 'IM' 'AM' };
attFigName = {'car' 'ship' 'train' 'plane' 'DEF' 'IPR' 'PO' 'FO' 'IV' 'MB' 'BC' 'OON' 'SA' 'LT' 'IM' 'AM' };
plotDrawStyleAll={
    struct('color',[1,0,0],'lineStyle','-' ),...
    struct('color',[0,1,0],'lineStyle','-'),...
    struct('color',[0,0,1],'lineStyle','-'),...
    struct('color',[0,0,0],'lineStyle','-'),...
    struct('color',[1,0,1],'lineStyle','-'),...
    struct('color',[0,1,1],'lineStyle','-'),...
    struct('color',[0.5,0.5,0.5],'lineStyle','-'),...
    struct('color',[136,0,21]/255,'lineStyle','-'),...
    struct('color',[255,127,39]/255,'lineStyle','-'),...
    struct('color',[0,162,232]/255,'lineStyle','-'),...
    struct('color',[1,0,0],'lineStyle','--'),...
    struct('color',[0,1,0],'lineStyle','--'),...
    struct('color',[0,0,1],'lineStyle','--'),...
    struct('color',[0,0,0],'lineStyle','--'),...
    struct('color',[1,0,1],'lineStyle','--'),...
    struct('color',[0,1,1],'lineStyle','--'),...
    struct('color',[0.5,0.5,0.5],'lineStyle','--'),...
    struct('color',[136,0,21]/255,'lineStyle','--'),...
    struct('color',[255,127,39]/255,'lineStyle','--'),...
    struct('color',[0,162,232]/255,'lineStyle','--'),...
    struct('color',[1,0,0],'lineStyle','-.'),...
    struct('color',[0,1,0],'lineStyle','-.'),...
    struct('color',[0,0,1],'lineStyle','-.'),...
    struct('color',[0,0,0],'lineStyle','-.'),...
    struct('color',[1,0,1],'lineStyle','-.'),...
    struct('color',[0,1,1],'lineStyle','-.'),...
    struct('color',[0.5,0.5,0.5],'lineStyle','-.'),...
    struct('color',[136,0,21]/255,'lineStyle','-.'),...
    struct('color',[255,127,39]/255,'lineStyle','-.'),...
    struct('color',[0,162,232]/255,'lineStyle','-.'),...
    struct('color',[163,73,164]/255,'lineStyle','-.'),...
    struct('color',[1,0,0],'lineStyle','-.'),...
    struct('color',[0,1,0],'lineStyle','-.'),...
    struct('color',[0,0,1],'lineStyle','-.'),...
    struct('color',[0,0,0],'lineStyle','-.'),...
    struct('color',[1,0,1],'lineStyle','-.'),...
    struct('color',[0,1,1],'lineStyle','-.'),...
    struct('color',[0.5,0.5,0.5],'lineStyle','-.'),...%gray-25%
    struct('color',[136,0,21]/255,'lineStyle','-.'),...%dark red
    struct('color',[255,127,39]/255,'lineStyle','-.'),...%orange
    struct('color',[0,162,232]/255,'lineStyle','-.'),...%Turquoise
    struct('color',[163,73,164]/255,'lineStyle','-.'),...%purple
    struct('color',[1,0,0],'lineStyle','-.'),...
    struct('color',[0,1,0],'lineStyle','-.'),...
    struct('color',[0,0,1],'lineStyle','-.'),...
    struct('color',[0,0,0],'lineStyle','-.'),...
    struct('color',[1,0,1],'lineStyle','-.'),...%pink
    struct('color',[0,1,1],'lineStyle','-.'),...
    struct('color',[0.5,0.5,0.5],'lineStyle','-.'),...%gray-25%
    struct('color',[136,0,21]/255,'lineStyle','-.'),...%dark red
    struct('color',[255,127,39]/255,'lineStyle','-.'),...%orange
    struct('color',[0,162,232]/255,'lineStyle','-.'),...%Turquoise
    struct('color',[163,73,164]/255,'lineStyle','-.'),...%purple
    struct('color',[0.5,0.5,0.5],'lineStyle','-.'),...%gray-25%
    struct('color',[136,0,21]/255,'lineStyle','-.'),...%dark red
    struct('color',[255,127,39]/255,'lineStyle','-.'),...%orange
    struct('color',[0,162,232]/255,'lineStyle','-.'),...%Turquoise
    struct('color',[163,73,164]/255,'lineStyle','-.'),...%purple
    struct('color',[1,0,0],'lineStyle','-.'),...
    struct('color',[0,1,0],'lineStyle','-.'),...
    struct('color',[0,0,1],'lineStyle','-.'),...
    struct('color',[0,0,0],'lineStyle','-.'),...
    struct('color',[1,0,1],'lineStyle','-.'),...
    struct('color',[0,1,1],'lineStyle','-.'),...
    struct('color',[0.5,0.5,0.5],'lineStyle','-.'),...
    struct('color',[136,0,21]/255,'lineStyle','-.'),...
    struct('color',[255,127,39]/255,'lineStyle','-.'),...
    struct('color',[0,162,232]/255,'lineStyle','-.'),...
    struct('color',[163,73,164]/255,'lineStyle','-.'),...
    struct('color',[1,0,0],'lineStyle','-.'),...
    struct('color',[0,1,0],'lineStyle','-.'),...
    struct('color',[0,0,1],'lineStyle','-.'),...
    struct('color',[0,0,0],'lineStyle','-.'),...
    struct('color',[1,0,1],'lineStyle','-.'),...
    struct('color',[0,1,1],'lineStyle','-.'),...
    struct('color',[0.5,0.5,0.5],'lineStyle','-.'),...
    struct('color',[136,0,21]/255,'lineStyle','-.'),...
    struct('color',[255,127,39]/255,'lineStyle','-.'),...
    struct('color',[0,162,232]/255,'lineStyle','-.'),...
    struct('color',[163,73,164]/255,'lineStyle','-.'),...
    struct('color',[1,0,0],'lineStyle','-.'),...
    struct('color',[0,1,0],'lineStyle','-.'),...
    struct('color',[0,0,1],'lineStyle','-.'),...
    struct('color',[0,0,0],'lineStyle','-.'),...
    };
seqs=configSeqs;
trackers=configTrackers;
numSeq=length(seqs);
numTrk=length(trackers);
nameTrkAll=cell(numTrk,1);
for idxTrk=1:numTrk
    t = trackers{idxTrk};
    nameTrkAll{idxTrk}=t.namePaper;
end
nameSeqAll=cell(numSeq,1);
numAllSeq=zeros(numSeq,1);
att=[];
for idxSeq=1:numSeq
    s = seqs{idxSeq};
    nameSeqAll{idxSeq}=s.name;
    s.len = s.endFrame - s.startFrame + 1;
    numAllSeq(idxSeq) = s.len;
    att(idxSeq,:)=load([attPath s.name '.txt']);
end
attNum = size(att,2);
figPath = '.\figs\overall\';
perfMatPath = '.\perfMat\overall\';
if ~exist(figPath,'dir')
    mkdir(figPath);
end
if ~exist(perfMatPath,'dir')
    mkdir(perfMatPath);
end
metricTypeSet = {'error', 'norm_error', 'overlap'};
evalTypeSet = 'OPE';
rankingType = 'AUC';
rankNum = 30 ;
plotDrawStyle = plotDrawStyleAll;
thresholdSetOverlap = 0:0.05:1;
thresholdSetError = 0:30;
thresholdSetNorm_Precision = 0:0.05:1;
num = 1;
for i=1:length(metricTypeSet)
    metricType = metricTypeSet{i};
    switch metricType
        case 'overlap'
            thresholdSet = thresholdSetOverlap;
            rankIdx = 11;
            xLabelName = 'Overlap threshold';
            yLabelName = 'Success rate';
        case 'error'
            thresholdSet = thresholdSetError;
            rankIdx = 6 ;
            xLabelName = 'Location error threshold [pixels]';
            yLabelName = 'Precision';
        case 'norm_error'
            thresholdSet = thresholdSetNorm_Precision;
            rankIdx = 11;
            xLabelName = 'Normalized location error threshold';
            yLabelName = 'Normalized precision';
    end
    tNum = length(thresholdSet);
    evalType = evalTypeSet;
    plotType = [metricType '_' evalType];
    switch metricType
        case 'overlap'
            titleName = ['Success plots of ' evalType];
        case 'error'
            titleName = ['Precision plots of ' evalType];
        case 'norm_error'
            titleName = ['Normalized precision plots of ' evalType];
    end
    dataName = [perfMatPath 'aveSuccessRatePlot_' num2str(numTrk) 'alg_'  plotType '.mat'];
    if ~exist(dataName)
        genPerfMat(seqs, trackers, evalType, nameTrkAll, perfMatPath);
    end
    load(dataName);
    numTrk = size(aveSuccessRatePlot,1);
    if rankNum > numTrk | rankNum <0
        rankNum = numTrk;
    end
    figName= [figPath 'quality_plot_' plotType '_' rankingType];
    idxSeqSet = 1:length(seqs);
    overall_val = plotDrawSave(numTrk,plotDrawStyle,aveSuccessRatePlot,idxSeqSet,rankNum,rankingType,rankIdx,nameTrkAll,thresholdSet,titleName, xLabelName,yLabelName,figName,metricType);
    attTrld = 0;
    for attIdx=1:attNum
        idxSeqSet=find(att(:,attIdx)>attTrld);
        disp([attName{attIdx} ' ' num2str(length(idxSeqSet))])
        figName=[figPath attFigName{attIdx} '_'  plotType '_' rankingType];
        titleName = ['Plots of ' evalType ': ' attName{attIdx}];
        switch metricType
            case 'overlap'
                titleName = ['Success plots of ' evalType ' - ' attName{attIdx}];
            case 'error'
                titleName = ['Precision plots of ' evalType ' - ' attName{attIdx}];
            case 'norm_error'
                titleName = ['Normalized precision plots of ' evalType ' - ' attName{attIdx}];
        end
        val = plotDrawSave(numTrk,plotDrawStyle,aveSuccessRatePlot,idxSeqSet,rankNum,rankingType,rankIdx,nameTrkAll,thresholdSet,titleName, xLabelName,yLabelName,figName,metricType);
    end
end
close all